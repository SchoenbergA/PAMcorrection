axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,lwd=4)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 4, 5))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(shape = 21, fill = "lightgray",
color = "black", size = 3)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 4, 5))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(shape = c(21,22,23), fill = "lightgray",
color = "black", size = 3)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 4, 5))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 4, 5))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
# scale_shape_manual(values=c(1, 4, 5))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(15, 16, 17))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(21, 22, 23))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_fill_manual(values=c(21, 22, 23))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_fill_manual(values=c(1, 2, 3))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_size_manual(values=c(1, 2, 3))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 3))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
#plot single informants
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
# plot only informats with all types
ggplot(dfn, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
PAMcorrection::plotPAMcorr(typeGENE)
PAMcorrection::plotPAMcorr(geneDICL)
PAMcorrection::plotPAMcorr(typeDICL,abs_dif = F,yl = c(-1,2))
PAMcorrection::plotPAMcorr(geneDIAL)
PAMcorrection::plotPAMcorr(typeDIAL)
par(mfrow=c(2,2))
#plot single informants
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
#alternative style
ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
#plot single informants
p1 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
p1
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
grid.arrange(p1, p2, nrow = 1)
require(gridExtra)
grid.arrange(p1, p2, nrow = 1)
grid.arrange(p1, p2,p1,p2, nrow = 2)
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend. title = element_blank())
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ + theme(legend.position = "none")
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
grid.arrange(p1, p2,p1,p2, nrow = 2)
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
#plot single informants
p1 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
p1
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(1, 2, 4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(4, 2, 1))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
#alternative style
p2 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
#alternative style
p2 <-ggplot(dfm[dfm$informant=="G3",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
unique(dfm$informant)
#alternative style
p2 <-ggplot(dfm[dfm$informant=="G2",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
# plot only informats with all types
ggplot(dfn, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
# set envi
getwd()
wds <- "C:/Envimaster/Evaluate_PAM/Src/"
wdd <- "C:/Envimaster/Evaluate_PAM/Data/"
require(reshape2)
require(tidyverse)
require(ggplot2)
require(dplyr)
require(gridExtra)
# load package
require(openxlsx)
require(PAMcorrection)
df <-read.csv(file.path(wdd,"full_clean.csv"),row.names = 1)
head(df)
typeDIAL <-PAMcorrection::TuningCorr_df(df,att1 = "type", att2 = "dialect")
# prepare data for ggplot
dfm <- select(typeDIAL, informant, type, PAM, CTR, PAM_corr)
dfm <-melt(dfm,id.vars = c("informant", "type"))
names(dfm)
head(dfm)
ggplot(dfm, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
# delete entries
# get names of informant with less than 15 entries
table(dfm$informant)
wh <-which(table(dfm$informant)!=15)
nwh <-names(wh) # get list of names
dfn <- dfm # get new df
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==names(test[i]),]
print(i)
}
dfn <- dfn[!dfn$informant==names(nwh[i]),]
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==names(nwh[i]),]
print(i)
}
# plot only informats with all types
ggplot(dfn, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
nwh <-names(wh) # get list of names
nwh
dfn <- dfm # get new df
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==names(nwh[i]),]
print(i)
}
# delete entries
# get names of informant with less than 15 entries
table(dfm$informant)
wh <-which(table(dfm$informant)!=15)
nwh <-names(wh) # get list of names
dfn <- dfm # get new df
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==names(nwh[i]),]
print(i)
}
# delete entries
# get names of informant with less than 15 entries
table(dfm$informant)
wh <-which(table(dfm$informant)!=15)
nwh <-names(wh) # get list of names
nwh
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==names(nwh[i]),]
print(i)
print(names(nwh[i]))
}
# delete entries
# get names of informant with less than 15 entries
table(dfm$informant)
wh <-which(table(dfm$informant)!=15)
wh
nwh <-names(wh) # get list of names
nwh
dfn <- dfm # get new df
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==nwh[i],]
print(i)
print(names(nwh[i]))
}
dfn <- dfm # get new df
for (i in 1:length(nwh)) {
dfn <- dfn[!dfn$informant==nwh[i],]
print(i)
print(nwh[i])
}
# plot only informats with all types
ggplot(dfn, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
# plot single informants
p1 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
p1
# alternative style
p2 <-ggplot(dfm[dfm$informant=="G2",], aes(type, value, col=type, shape=variable))+
geom_point(cex = 6,stroke=2)+
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())+ theme(legend.position = "none")
p2
# plot single informants
p1 <-ggplot(dfm[dfm$informant=="VSJUNG1",], aes(type, value, col=type, shape=variable)) +
geom_point(cex=6) +
facet_wrap(~informant) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
p1
# plot only informants with all types
ggplot(dfn, aes(type, value, col=type, shape=variable)) +
geom_point() +
facet_wrap(~informant) +
scale_shape_manual(values=c(2,1,4))+
theme(axis.text = element_blank(),
axis.ticks = element_blank())
source("C:/Envimaster/PAMcorrection/R/TuningCorr_df.R", encoding = 'UTF-8')
source("C:/Envimaster/PAMcorrection/R/TuningCorr_df.R", encoding = 'UTF-8')
library(PAMcorrection)
TuningCorr_df <-function(df,att1=NULL,att2=NULL,tuning=NULL,threshold=NULL){
# check input
if(is.null(att1) & is.null(att2)==F){
stop("missing 'att1' but given 'att2'")
}
##############################################################################
# 1. Tuning
if (is.null(tuning)){
# get copy with no changes
dft <-df
cat("No tuning - using original input data",sep="\n")
} else if(tuning=="whisker"){
# copy df
dft <- df
# get absolut difference
dft$diffa <- abs(dft$PAM-dft$CTR)
# get boxplot
bp <-boxplot(dft$diffa)
# clip values by whisker
boxplot(dft$diffa)
#print(dft$diffa<bp$stats[1,1] | dft$diffa>bp$stats[5,1])
dft <-dft[!(dft$diffa<bp$stats[1,1] | dft$diffa>bp$stats[5,1]),] # clip out of whisker
cat(paste0("Tuning data by ",tuning),sep="\n")
cat(paste0("clipping ",nrow(df)-nrow(dft), " entries",sep="\n"))
} else if(tuning=="quantil"){
# copy df
dft <- df
# get absolut difference
dft$diffa <- abs(dft$PAM-dft$CTR)
# get boxplot
bp <-boxplot(dft$diffa)
# clip values by whisker
boxplot(dft$diffa)
#print(dft$diffa<bp$stats[2,1] | dft$diffa>bp$stats[4,1])
dft <-dft[!(dft$diffa<bp$stats[2,1] | dft$diffa>bp$stats[4,1]),] # clip out of quantil
cat(paste0("Tuning data by ",tuning),sep="\n")
cat(paste0("clipping ",nrow(df)-nrow(dft), " entries",sep="\n"))
} else if(tuning=="threshold"){
# copy df
dft <- df
# get absolut difference
dft$diffa <- abs(dft$PAM-dft$CTR)
dft <-dft[!(dft$diffa>threshold),] # clip out of whisker
cat(paste0("Tuning data by threshold ",threshold),sep="\n")
cat(paste0("clipping ",nrow(df)-nrow(dft), " entries",sep="\n"))
}
##############################################################################
# 2. Global mean #############################################################
# if no attribute is given, calculate global mean
if(is.null(att1)){
df$PAM_corr <-df$PAM * mean(dft$CTR / dft$PAM)
cat(paste0("global mean (factor) "),mean(dft$CTR / dft$PAM))
return(df)
} # end global mean
##############################################################################
##############################################################################
# Prepare col position of attributes and init dataframes
# get col position of attributes
if(is.null(att2)){
pos1 <- which(colnames(df)==att1)
} else {
pos1 <- which(colnames(df)==att1)
pos2 <- which(colnames(df)==att2)
}
# init dataframe to store results
ck <-data.frame() # to check for missing data
re <-data.frame() # store resulting mean vlaues for class
##############################################################################
# 3. Mean factor #############################################################
# for factor correction
if(is.null(att2)){
# correct by one attribute
cat("using att 1 only",sep="\n")
# get uniques for each pos
u1 <- unique(df[,pos1])
# inner loop for pos1
for (i in 1:length(u1)) {
# get results to check for missing results
ck <- rbind(ck,c(length(dft$PAM[ dft[,pos1]==u1[i] ]),u1[i],round(mean(dft$CTR[ dft[,pos1]==u1[i] ] / dft$PAM[ dft[,pos1]==u1[i] ]),digits = 4)))
if(ck[nrow(ck),3]=="NaN"){
#cat(paste0("Class '",re[nrow(ck),2],"' has no values left after tuning, using original data"),sep="\n")
# use original data
df$PAM_corr[ df[,pos1]==u1[i] ] <-df$PAM[ df[,pos1]==u1[i] ] * mean(df$CTR[ df[,pos1]==u1[i] ] / df$PAM[ df[,pos1]==u1[i] ])
# store in df
re <- rbind(re,c(length(df$PAM[ df[,pos1]==u1[i] ]),u1[i],round(mean(df$CTR[ df[,pos1]==u1[i] ] / df$PAM[ df[,pos1]==u1[i] ]),digits = 4),"noData"))
} else {
df$PAM_corr[ df[,pos1]==u1[i] ] <-df$PAM[ df[,pos1]==u1[i] ]    * mean(dft$CTR[ dft[,pos1]==u1[i] ] / dft$PAM[ dft[,pos1]==u1[i] ])
re <- rbind(re,c(length(dft$PAM[ dft[,pos1]==u1[i] ]),u1[i],round(mean(dft$CTR[ dft[,pos1]==u1[i] ] / dft$PAM[ dft[,pos1]==u1[i] ]),digits = 4),"fine"))
} # end fork for checking
}# end i loop
# return
#cat("Platzhalter1",sep="\n")
colnames(re) <- c("n_obj","type","mean_f","tuning")
re$tuning[re$mean_f=="NaN" & re$tuning=="noData"] <- "missing"
if(any(re$tuning=="noData")){
warning("Some combinations have no values left after tuning, using original data")
}
print(re)
#ls <-list(df,re)
#return(ls)
return(df)
} else {
cat("using att 1 and att 2",sep="\n")
# correct by two attributes
# get uniques for each pos
u1 <- unique(df[,pos1])
u2 <- unique(df[,pos2])
# outer loop over pos2
for (j in 1: length(u2)) {
# inner loop for pos1
for (i in 1:length(u1)) {
ck <-rbind(ck,c(length(dft$PAM[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]]),paste0(u1[i]," ",u2[j]),round(mean(dft$CTR[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]] / dft$PAM[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]]),digits = 4)))
# get results to check for missing results
if(ck[nrow(ck),3]=="NaN"){
#cat(paste0("Class '",re[nrow(re),2],"' has no values left after tuning, using original data"),sep="\n")
df$PAM_corr[df[,pos1]==u1[i] & df[,pos2]==u2[j]] <-df$PAM[df[,pos1]==u1[i] & df[,pos2]==u2[j]] * mean(df$CTR[df[,pos1]==u1[i] & df[,pos2]==u2[j]] / df$PAM[df[,pos1]==u1[i] & df[,pos2]==u2[j]])
# store in df
re <-rbind(re,c(length(df$PAM[df[,pos1]==u1[i] & df[,pos2]==u2[j]]),paste0(u1[i]," ",u2[j]),round(mean(df$CTR[df[,pos1]==u1[i] & df[,pos2]==u2[j]] / df$PAM[df[,pos1]==u1[i] & df[,pos2]==u2[j]]),digits = 4),"noData"))
} else {
df$PAM_corr[df[,pos1]==u1[i] & df[,pos2]==u2[j]] <-df$PAM[df[,pos1]==u1[i] & df[,pos2]==u2[j]]     * mean(dft$CTR[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]] / dft$PAM[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]])
re <-rbind(re,c(length(dft$PAM[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]]),paste0(u1[i]," ",u2[j]),round(mean(dft$CTR[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]] / dft$PAM[dft[,pos1]==u1[i] & dft[,pos2]==u2[j]]),digits = 4),"fine"))
}# end fork for checking
}# end i loop
}# end j loop
# return
#cat("Platzhalter2",sep="\n")
colnames(re) <- c("n_obj","type","mean_f","tuning")
re$tuning[re$mean_f=="NaN" & re$tuning=="noData"] <- "missing"
if(any(re$tuning=="noData")){
warning("Some combinations have no values left after tuning, using original data")
}
print(re)
#ls <-list(df=df,re=re)
#return(ls)
return(df)
}
##############################################################################
} # end of function
# load data
dat <- read.csv(system.file("extdata","exp_PAM.csv",package = "PAMcorrection"))
head(dat)
# how the tuning works ("whisker" and "quantil")
bp <-boxplot(dat$PAM-dat$CTR)
bp$stats[1,1] # lower whisker
bp$stats[2,1] # lower quantil
bp$stats[3,1] # median
bp$stats[4,1] # upper quantil
bp$stats[5,1] # upper whisker
# correct df by global means
corrected <-TuningCorr_df(dat,tuning = "whisker")
corrected <-TuningCorr_df(dat,tuning = "quantil")
# use one class (no tuning)
corrected <-TuningCorr_df(dat,att1 = "dilect")
# use one class with treshold tuning
corrected <-TuningCorr_df(dat,att1 = "dilect",tuning="treshold",treshold=0.8)
